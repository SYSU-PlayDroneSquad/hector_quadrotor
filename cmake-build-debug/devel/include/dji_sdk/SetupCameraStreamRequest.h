// Generated by gencpp from file dji_sdk/SetupCameraStreamRequest.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_SETUPCAMERASTREAMREQUEST_H
#define DJI_SDK_MESSAGE_SETUPCAMERASTREAMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_sdk
{
template <class ContainerAllocator>
struct SetupCameraStreamRequest_
{
  typedef SetupCameraStreamRequest_<ContainerAllocator> Type;

  SetupCameraStreamRequest_()
    : cameraType(0)
    , start(0)  {
    }
  SetupCameraStreamRequest_(const ContainerAllocator& _alloc)
    : cameraType(0)
    , start(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cameraType_type;
  _cameraType_type cameraType;

   typedef uint8_t _start_type;
  _start_type start;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FPV_CAM)
  #undef FPV_CAM
#endif
#if defined(_WIN32) && defined(MAIN_CAM)
  #undef MAIN_CAM
#endif

  enum {
    FPV_CAM = 0u,
    MAIN_CAM = 1u,
  };


  typedef boost::shared_ptr< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetupCameraStreamRequest_

typedef ::dji_sdk::SetupCameraStreamRequest_<std::allocator<void> > SetupCameraStreamRequest;

typedef boost::shared_ptr< ::dji_sdk::SetupCameraStreamRequest > SetupCameraStreamRequestPtr;
typedef boost::shared_ptr< ::dji_sdk::SetupCameraStreamRequest const> SetupCameraStreamRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator1> & lhs, const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cameraType == rhs.cameraType &&
    lhs.start == rhs.start;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator1> & lhs, const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dji_sdk

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c63917a6476a348dad79b8c69b9671ea";
  }

  static const char* value(const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc63917a6476a348dULL;
  static const uint64_t static_value2 = 0xad79b8c69b9671eaULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/SetupCameraStreamRequest";
  }

  static const char* value(const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#constant for vga image frequency\n"
"uint8 FPV_CAM  = 0\n"
"uint8 MAIN_CAM = 1\n"
"\n"
"# use above constants to config freq.\n"
"uint8 cameraType\n"
"\n"
"# 1 for start camera stream, 0 for stop\n"
"uint8 start\n"
"\n"
;
  }

  static const char* value(const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cameraType);
      stream.next(m.start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetupCameraStreamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::SetupCameraStreamRequest_<ContainerAllocator>& v)
  {
    s << indent << "cameraType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cameraType);
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_SETUPCAMERASTREAMREQUEST_H
